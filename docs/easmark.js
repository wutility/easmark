/*! Easmark - v1.0.0 | Copyright 2022 - Haikel Fazzani */
!function(e,n){"object"==typeof exports&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):(e="undefined"!=typeof globalThis?globalThis:e||self).easmark=n()}(this,(function(){"use strict";const e={regex:{list:/^(?:(^|\n)([+-]|\d+\.) +(.*(\n[ \t]+.*)*))+/g,table:/^(\|[^\n]+\|\r?\n)((?:\|:?[-]+:?)+\|)(\n(?:\|[^\n]+\|\r?\n?)*)/g,code:/(`{3,}|~{3,})\n? *(\S+)? *([\s\S]+?)\1/gm},code:(e,n)=>(console.log(e),e.replace(n,((e,n,t,l)=>`<pre><code class="language-${t}">${(l=l.replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")).replace(/^\n*\s+/g,"")}</code></pre>`))),list:(n,t="")=>(t=n.match(/^[+-]/m)?"ul":"ol",(n=n.replace(/(\[\s?x?\])\s+(.*)\n/g,((e,n)=>e.replace(n,`<input type="checkbox" ${n.includes("x")?"checked":""} disbaled/>`))))?`<${t}>${n.replace(/(?:[+-]|\d+\.) +(.*)\n?(([ \t].*\n?)*)/g,((n,t,l)=>`<li>${t}\n${(e=>e.replace(new RegExp("^"+(e.match(/^\s+/)||"")[0],"gm"),""))(l||"").replace(e.regex.list,e.list)}</li>`))}</${t}>`:""),table:e=>(console.log(e),e)},n={regex:{heading:/^(#+)\s+(.*)/,blockquote:/^>\s+.*/g,media:/[!&]?\[([!&]?\[.*?\)|[^\]]*?)]\((.*?)( .*?)?\)|(\w+:\/\/[$\-.+!*'()/,\w]+)/g},heading:(e,n)=>e.replace(n,((e,n,t)=>`<h${n.length} id="${t.replace(/\s+/g,"-")}">${t}</h${n.length}>`)),blockquote:e=>`<blockquote>${e=e.replace(/\>\s+/g,"")}</blockquote>`,media:(e,n)=>e.replace(n,((e,n,t)=>/^!/.test(e)?`<img src="${t}" alt="${n}">\n`:/^&/.test(e)?`<iframe src="${t}" title="${n}"></iframe>\n`:`<a href="${t}">${n}</a>\n`))};function t(e,n){return Object.keys(n.regex).forEach((t=>{e.match(n.regex[t])&&(e=n[t](e,n.regex[t]))})),e}return function(l){let r=l.split(/\n\s*\n/),c=[];for(let l of r)l=t(l,n),l=t(l,e),c.push(l);return c.map((e=>function(e){return e=(e=(e=e.replace(/([*_]{1,3})((.|\n)+?)\1/g,((e,n,t)=>1===n.length?`<em>${t}</em>`:3===n.length?`<strong><em>${t}</strong></em>`:`<strong>${t}</strong>`))).replace(/(~{2,})((.|\n)+?)\1/g,((e,n,t)=>`<s>${t}</s>`))).replace(/`([^`].*?)`/g,((e,n)=>`<span class="marked">${n}</span>`)),/^\<.*\>/g.test(e.trim())||(e=`<p>${e}</p>`),e}(e))).join("\n")}}));
